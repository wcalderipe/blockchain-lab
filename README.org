* :man_scientist: :test_tube: :microscope: Ethereum Blockchain

This is my personal laboratory where I conduct experiments with Smart Contracts
(SC) in the Ethereum blockchain.

** Workflow

   I like short feedback loops for the exploration phase of a problem, so I'm
   using truffle's =develop= command to run a REPL. It comes with built-in
   utility functions to migrate, test, and compile the SC without quitting the
   underlying process.

   #+begin_src shell
     truffle develop
   #+end_src

   The above method is often enough, but I sometimes feel like having more
   visual feedback on the created transactions resulted from SC interactions
   from the REPL. For that, I like to pair truffle with Ganache GUI.

   #+begin_src shell
     truffle compile
     truffle migrate --network development
     truffle console --network development
   #+end_src

   *NOTE:* The networks are defined at [[./truffle-config.js][truffle-config.js]].

** Testing

   #+begin_src shell
     # Runs all tests.
     truffle test

     # Runs a single test in any supported extension (.js, .ts, .sol).
     truffle test <FILEPATH>
   #+end_src

*** State

    By default, Truffle doesn't reset the state in between tests and this might
    have some undesired behaviors. However, we can workaround the issue by
    deploying the contract again in the test scope.

    Calling =.new= in the contract class will force a new deploy with a new
    address. Thus the state will be fresh only within the test where it was
    invoked.

    #+begin_src javascript
      it('foo', async () => {
        console.log((await TodoList.deployed()).address) // address 1
        console.log((await TodoList.new()).address)      // address 2
        console.log((await TodoList.deployed()).address) // address 1
      })

      it('bar', async () => {
        console.log((await TodoList.deployed()).address) // address 1
      })
    #+end_src

    It seems intuitive to me to always deploy a new contract for every test to
    avoid state leaking. However, the Truffle team must have a good reason to
    share the deployed address within tests in the same file, and I don't know
    the consequences of repeatably deploy the same contract yet.

*** Debugging

    See [[https://www.trufflesuite.com/docs/truffle/getting-started/debugging-your-contracts#in-test-debugging][In-test debugging]] documentation.

** Experiments

*** Todo List

    See [[./contracts/TodoList.sol][TodoList.sol]] and [[./test/todo_list.js][todo_list.js]].

    #+begin_src javascript
      TodoList.deployed().then(todo => todo.add("do some foo"))
      TodoList.deployed().then(todo => todo.get(0))
      TodoList.deployed().then(todo => todo.toggle(0))
    #+end_src
